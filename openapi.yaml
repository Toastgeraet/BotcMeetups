openapi: 3.1.0
info:
  title: Blood on the Clocktower Meetup API
  version: 1.0.0
  description: API for managing Blood on the Clocktower meetups and events

servers:
  - url: https://api.bloodmeetup.com/v1
    description: Production server
  - url: http://localhost:3000/v1
    description: Local development

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        displayName:
          type: string
        avatarUrl:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        bio:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        preferences:
          type: object
          properties:
            experienceLevel:
              type: string
              enum: [beginner, intermediate, expert]
            notifications:
              type: object
              properties:
                email:
                  type: boolean
                reminders:
                  type: boolean
                newEvents:
                  type: boolean

    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        date:
          type: string
          format: date-time
        location:
          type: string
        address:
          type: string
          nullable: true
        maxPlayers:
          type: integer
          minimum: 5
          maximum: 20
        currentPlayers:
          type: integer
        isPublic:
          type: boolean
        image:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        createdById:
          type: string
          format: uuid
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Participant'

    Participant:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        displayName:
          type: string
        avatarUrl:
          type: string
          nullable: true
        isHost:
          type: boolean
        role:
          type: string
          enum: [Player, Storyteller, Spectator]
        joinedAt:
          type: string
          format: date-time

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - displayName
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                displayName:
                  type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /events:
    get:
      summary: Get all events
      parameters:
        - name: search
          in: query
          schema:
            type: string
        - name: location
          in: query
          schema:
            type: string
        - name: dateRange
          in: query
          schema:
            type: string
            enum: [today, this-week, this-month, next-month]
        - name: isPublic
          in: query
          schema:
            type: boolean
        - name: hasAvailableSpots
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

    post:
      summary: Create a new event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

  /events/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get event by ID
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

    put:
      summary: Update event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

    delete:
      summary: Delete event
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Event deleted successfully

  /events/{id}/join:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    post:
      summary: Join an event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
                  enum: [Player, Storyteller, Spectator]
      responses:
        '200':
          description: Successfully joined event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

  /events/{id}/leave:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    post:
      summary: Leave an event
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully left event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

  /users/me:
    get:
      summary: Get current user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      summary: Update user profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/me/preferences:
    put:
      summary: Update user preferences
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                experienceLevel:
                  type: string
                  enum: [beginner, intermediate, expert]
                notifications:
                  type: object
                  properties:
                    email:
                      type: boolean
                    reminders:
                      type: boolean
                    newEvents:
                      type: boolean
      responses:
        '200':
          description: Preferences updated successfully